
@topPanelRadius: @gridBorderRadius - @gridBorderWidth;
.ui-grid-top-panel {
    position: relative;
    // z-index: 1;
    // background-color: @darkGray; // #EAEAEA
    border-bottom: 1px solid @borderColor; // #D4D4D4

    overflow: hidden;  // Disable so menus show up
    font-weight: bold;

    .gradient(@headerBackgroundColor, @headerGradientStart, @headerGradientStop);  

    .border-radius(@topPanelRadius, 0, 0, @topPanelRadius);
}

.ui-grid-group-panel {
  .gradient(@headerBackgroundColor, @headerGradientStart, @headerGradientStop);
  border-bottom: 1px solid @borderColor; // #D4D4D4
  .border-radius(@topPanelRadius, 0, 0, @topPanelRadius);
  min-height: 30px;
}
  .ui-grid-header-group-panel .hidden {
      display: none;
  }

.ui-grid-header-viewport {
  overflow: hidden; // Disable so menus show up
}

.ui-grid-header-canvas {
  position: relative;

  // Clearfix for floating header cells
  &:before, &:after {
    content: "";
    display: table;
    line-height: 0;
  }

  &:after {
    clear:both;
  }

  // .border-radius(@gridBorderRadius, 0, 0, @gridBorderRadius);
}

.ui-grid-header-cell {
  position: relative;
  float: left;
  top: 0;
  bottom: 0;
  background-color: inherit;

  .user-select(none);

  // Default to width 0 so header height can calculate right. Otherwise
  //  the header cells will flow onto the next line of the header container
  //  and cause the header height to be calculated as twice the height
  //  it should be. The column widths are calculated dynamically
  width: 0;

  &.sortable {
    cursor: pointer;
  }
}

// Make vertical bar in header row fill the height of the cell completely
.ui-grid-header .ui-grid-vertical-bar {
  top: 0;
  bottom: 0;
}

.ui-grid-column-menu-button {
  position: absolute;
  right: @gridBorderWidth; // So it doesn't overlay the vertical bar
  top: 0;
  bottom: 0;

  .ui-grid-icon-angle-down {
    vertical-align: sub;
  }
}

.ui-grid-column-menu {
  // z-index: 2; // So it shows up over grid canvas
  position: absolute;
  // overflow: hidden;
  // padding: 0 10px 20px 10px;
  // cursor: default; // Parent element has pointer cursor
}

// .ui-grid-column-menu .inner {
//   background: @headerBackgroundColor;
//   border: @gridBorderWidth solid @borderColor;
//   position: relative;
//   white-space: nowrap;

//   .rounded(@gridBorderRadius);
//   .box-shadow(e("0 10px 20px rgba(0, 0, 0, 0.2), inset 0 12px 12px -14px rgba(0, 0, 0, 0.2)"));

//   /* Slide up/down animations */
//   &.ng-hide-add, &.ng-hide-remove {
//     .transition(all, 0.05s, linear);
//     display: block !important;
//   }
  
//   &.ng-hide-add.ng-hide-add-active,
//   &.ng-hide-remove {
//     .transform(translateY(-100%));
//   }
   
//   &.ng-hide-add,
//   &.ng-hide-remove.ng-hide-remove-active {
//     .transform(translateY(0));
//   }
// }

// .ui-grid-column-menu .inner ul {
//   margin: 0;
//   list-style-type: none;

//   li {
//     padding: 8px;
//     cursor: pointer;

//     // Show a shadow when hovering over a menu item
//     &:hover {
//       // background-color: negation(@headerBackgroundColor, #fff);
//       .inner-shadow(@vertical: 0, @blur: 14px, @alpha: 0.2);
//     }

//     &.selected {
//       .inner-shadow(@vertical: 0, @blur: 14px, @alpha: 0.2);
//       background-color: @selectedColor;
//     }
//   }

//   // Show a bottom border on all but the last menu item
//   li:not(:last-child) {
//     border-bottom: @gridBorderWidth solid @borderColor;
//   }
// }